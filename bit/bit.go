package bit

/*问题*/
/*
两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。

给出两个整数 x 和 y，计算它们之间的汉明距离。

注意：
0 ≤ x, y < 231.

示例:

输入: x = 1, y = 4

输出: 2

解释:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

上面的箭头指出了对应二进制位不同的位置。
*/
/*思路*/
/*
x%2 与 y%2比较，不等汉明距离加一
x=x/2 y=y/2，进行下一位的比较
*/
func HammingDistance(x int, y int) int {
	res := 0
	modX := 0
	modY := 0
	for {
		modX = x % 2
		modY = y % 2
		if modX != modY {
			res++
		}

		x = x / 2
		y = y / 2

		if x == 0 && y == 0 {
			break
		}
	}
	return res
}

/*问题*/
/*
二进制手表顶部有 4 个 LED 代表小时（0-11），底部的 6 个 LED 代表分钟（0-59）。

每个 LED 代表一个 0 或 1，最低位在右侧。

8 4 2 1

32 16 8 4 2 1


例如，上面的二进制手表读取 “3:25”。

给定一个非负整数 n 代表当前 LED 亮着的数量，返回所有可能的时间。

案例:

输入: n = 1
返回: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]


注意事项:

输出的顺序没有要求。
小时不会以零开头，比如 “01:00” 是不允许的，应为 “1:00”。
分钟必须由两位数组成，可能会以零开头，比如 “10:2” 是无效的，应为 “10:02”。
*/
/*思路*/
/*
合法检测：上行0-11，下行0-59
n个点怎么分配？
n1+n2=n;n1:0-3;n2:0-5
*/
//func getHour(num int) []string {
//	hourMap := make([])
//}
//
//func getMinute(num int) []string {
//
//}
//func ReadBinaryWatch(num int) []string {
//	if num > 8 || num < 0 {
//		return nil
//	}
//
//	for i := 0; i <= 3; i++ {
//
//	}
//}
